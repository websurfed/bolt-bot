import { Client, ChatInputCommandInteraction, ContextMenuCommandInteraction, UserContextMenuCommandInteraction, MessageContextMenuCommandInteraction, AutocompleteInteraction, PermissionsString, RESTPostAPIApplicationCommandsJSONBody, ButtonInteraction, Awaitable, Message, InteractionCollectorOptions, ButtonBuilder } from 'discord.js';

/**
 * Options for instantiating a CommandKit handler.
 */
interface CommandKitOptions {
    /**
     * The Discord.js client object to use with CommandKit.
     */
    client: Client;
    /**
     * The path to your commands directory.
     */
    commandsPath?: string;
    /**
     * The path to your events directory.
     */
    eventsPath?: string;
    /**
     * The path to the validations directory.
     */
    validationsPath?: string;
    /**
     * List of development guild IDs to restrict devOnly commands to.
     */
    devGuildIds?: string[];
    /**
     * List of developer user IDs to restrict devOnly commands to.
     */
    devUserIds?: string[];
    /**
     * List of developer role IDs to restrict devOnly commands to.
     */
    devRoleIds?: string[];
    /**
     * Skip CommandKit's built-in validations (for devOnly commands).
     */
    skipBuiltInValidations?: boolean;
    /**
     * Bulk register application commands instead of one-by-one.
     */
    bulkRegister?: boolean;
}
/**
 * A reload type for commands.
 */
type ReloadOptions = 'dev' | 'global' | ReloadType;

/**
 * Props for command run functions.
 */
interface CommandProps {
    /**
     * The current command interaction object.
     */
    interaction: ChatInputCommandInteraction | ContextMenuCommandInteraction | UserContextMenuCommandInteraction | MessageContextMenuCommandInteraction | AutocompleteInteraction;
    /**
     * The Discord.js client object that CommandKit is handling.
     */
    client: Client<true>;
    /**
     * The current CommandKit handler instance.
     */
    handler: CommandKit;
}
/**
 * Props for autocomplete command run functions.
 */
interface AutocompleteProps extends CommandProps {
    /**
     * The current autocomplete command interaction object.
     */
    interaction: AutocompleteInteraction;
}
/**
 * Props for slash (chat input) command run functions.
 */
interface SlashCommandProps extends CommandProps {
    /**
     * The current slash (chat input) command interaction object.
     */
    interaction: ChatInputCommandInteraction;
}
/**
 * Props for context menu command run functions.
 */
interface ContextMenuCommandProps extends CommandProps {
    /**
     * The current context menu command interaction object.
     */
    interaction: ContextMenuCommandInteraction;
}
/**
 * Props for user context menu command run functions.
 */
interface UserContextMenuCommandProps extends CommandProps {
    interaction: UserContextMenuCommandInteraction;
}
/**
 * Props for message context menu command run functions.
 */
interface MessageContextMenuCommandProps extends CommandProps {
    interaction: MessageContextMenuCommandInteraction;
}
/**
 * Props for command validation functions.
 */
interface ValidationProps {
    /**
     * The current command interaction object.
     */
    interaction: ChatInputCommandInteraction | ContextMenuCommandInteraction | AutocompleteInteraction;
    /**
     * The Discord.js client object that CommandKit is handling.
     */
    client: Client<true>;
    /**
     * The current (local) target command object.
     */
    commandObj: CommandObject;
    /**
     * The current CommandKit handler instance.
     */
    handler: CommandKit;
}
/**
 * Additional command configuration options.
 */
interface CommandOptions {
    /**
     * A boolean indicating whether the command is guild-only.
     * Used for built-in validation.
     *
     * @deprecated Use `dm_permission` in the command's `data` object instead.
     */
    guildOnly?: boolean;
    /**
     * A boolean indicating whether the command is developer-only.
     * Used for registration and built-in validation.
     */
    devOnly?: boolean;
    /**
     * A boolean indicating whether the command is deleted/ignored on restart/reload.
     */
    deleted?: boolean;
    /**
     * A string or array of permissions that a user needs for the current command to be executed.
     * Used for built-in validation.
     *
     * @example
     * userPermissions: 'BanMembers'
     * or
     * userPermissions: ['BanMembers', 'KickMembers']
     */
    userPermissions?: PermissionsString | PermissionsString[];
    /**
     * A string or array of permissions that the bot needs to execute the current command.
     * Used for built-in validation.
     *
     * @example
     * botPermissions: 'BanMembers'
     * or
     * botPermissions: ['BanMembers', 'KickMembers']
     */
    botPermissions?: PermissionsString | PermissionsString[];
    [key: string]: any;
}
type CommandData = RESTPostAPIApplicationCommandsJSONBody;
type CommandObject = {
    /**
     * An object which defines the structure of the application command.
     */
    data: CommandData;
    /**
     * Additional command configuration options.
     */
    options?: CommandOptions;
    /**
     * The path to the command file.
     */
    filePath: string;
    /**
     * The command's category. Determined based on the command folder.
     *
     * @example
     * ```txt
     * "/src/commands/ping.js" -> null
     * "/src/commands/Misc/ping.js" -> "Misc"
     * ```
     */
    category: string | null;
    [key: string]: any;
};
declare enum ReloadType {
    /**
     * Reload developer/guild commands.
     */
    Developer = "dev",
    /**
     * Reload global commands.
     */
    Global = "global"
}

declare class CommandKit {
    #private;
    /**
     * Create a new command and event handler with CommandKit.
     *
     * @param options - The default CommandKit configuration.
     * @see {@link https://commandkit.js.org/docs/commandkit-setup}
     */
    constructor(options: CommandKitOptions);
    /**
     * Updates application commands with the latest from "commandsPath".
     */
    reloadCommands(type?: ReloadOptions): Promise<void>;
    /**
     * Updates application events with the latest from "eventsPath".
     */
    reloadEvents(): Promise<void>;
    /**
     * Updates application command validations with the latest from "validationsPath".
     */
    reloadValidations(): Promise<void>;
    /**
     * @returns An array of objects of all the commands that CommandKit is handling.
     */
    get commands(): CommandObject[];
    /**
     * @returns The path to the commands folder which was set when instantiating CommandKit.
     */
    get commandsPath(): string | undefined;
    /**
     * @returns The path to the events folder which was set when instantiating CommandKit.
     */
    get eventsPath(): string | undefined;
    /**
     * @returns The path to the validations folder which was set when instantiating CommandKit.
     */
    get validationsPath(): string | undefined;
    /**
     * @returns An array of all the developer user IDs which was set when instantiating CommandKit.
     */
    get devUserIds(): string[];
    /**
     * @returns An array of all the developer guild IDs which was set when instantiating CommandKit.
     */
    get devGuildIds(): string[];
    /**
     * @returns An array of all the developer role IDs which was set when instantiating CommandKit.
     */
    get devRoleIds(): string[];
}

/**
 * The handler to run when a button is clicked. This handler is called with the interaction as the first argument.
 * If the first argument is null, it means that the interaction collector has been destroyed.
 */
type CommandKitButtonBuilderInteractionCollectorDispatch = (interaction: ButtonInteraction) => Awaitable<void>;
type CommandKitButtonBuilderOnEnd = () => Awaitable<void>;
type CommandKitButtonBuilderInteractionCollectorDispatchContextData = {
    /**
     * The message to listen for button interactions on.
     */
    message: Message;
    /**
     * The duration (in ms) that the collector should run for.
     */
    time?: number;
    /**
     * If the collector should automatically reset the timer when a button is clicked.
     */
    autoReset?: boolean;
} & Omit<InteractionCollectorOptions<ButtonInteraction>, 'filter' | 'componentType'>;
declare class ButtonKit extends ButtonBuilder {
    #private;
    /**
     * Sets up an inline interaction collector for this button. This collector by default allows as many interactions as possible if it is actively used.
     * If unused, this expires after 24 hours or custom time if specified.
     * @param handler The handler to run when the button is clicked
     * @param data The context data to use for the interaction collector
     * @returns This button
     * @example
     * ```ts
     * const button = new ButtonKit()
     *   .setLabel('Click me')
     *   .setStyle(ButtonStyle.Primary)
     *   .setCustomId('click_me');
     *
     * const row = new ActionRowBuilder().addComponents(button);
     *
     * const message = await channel.send({ content: 'Click the button', components: [row] });
     *
     * button.onClick(async (interaction) => {
     *   await interaction.reply('You clicked me!');
     * }, { message });
     *
     * // Remove onClick handler and destroy the interaction collector
     * button.onClick(null);
     * ```
     */
    onClick(handler: CommandKitButtonBuilderInteractionCollectorDispatch, data?: CommandKitButtonBuilderInteractionCollectorDispatchContextData): this;
    onEnd(handler: CommandKitButtonBuilderOnEnd): this;
}

interface CommandKitConfig {
    /**
     * The source directory of the project.
     */
    src: string;
    /**
     * The main "javascript" file of the project.
     */
    main: string;
    /**
     * Whether or not to use the watch mode. Defaults to `true`.
     */
    watch: boolean;
    /**
     * The output directory of the project. Defaults to `dist`.
     */
    outDir: string;
    /**
     * Whether or not to include extra env utilities. Defaults to `true`.
     */
    envExtra: boolean;
    /**
     * Node.js cli options.
     */
    nodeOptions: string[];
    /**
     * Whether or not to clear default restart logs. Defaults to `true`.
     */
    clearRestartLogs: boolean;
    /**
     * Whether or not to minify the output. Defaults to `false`.
     */
    minify: boolean;
    /**
     * Whether or not to include sourcemaps in production build. Defaults to `false`.
     */
    sourcemap: boolean | 'inline';
    /**
     * Whether or not to include anti-crash handler in production. Defaults to `true`.
     */
    antiCrash: boolean;
    /**
     * Whether or not to polyfill `require` function. Defaults to `true`.
     */
    requirePolyfill: boolean;
}
declare function getConfig(): CommandKitConfig;
declare const requiredProps: readonly ["src", "main"];
type R = (typeof requiredProps)[number];
type PartialConfig<T extends CommandKitConfig> = Partial<Omit<T, R>> & Pick<T, R>;
declare function defineConfig(config: PartialConfig<CommandKitConfig>): Partial<CommandKitConfig>;

type CommandKitEffectCallback = () => void;
type CommandKitSignalInitializer<T> = T | (() => T);
type CommandKitSignalUpdater<T> = T | ((prev: T) => T);
type CommandKitSignal<T> = readonly [
    () => T,
    (value: CommandKitSignalUpdater<T>) => void,
    () => void
];
/**
 * Creates a new signal.
 * @param value - The initial value to use.
 * @returns An array of functions: a getter, a setter, and a disposer.
 */
declare function createSignal<T = unknown>(value?: CommandKitSignalInitializer<T>): CommandKitSignal<T>;
/**
 * Creates a new effect.
 * @param callback - The callback function to execute.
 */
declare function createEffect(callback: CommandKitEffectCallback): void;

export { AutocompleteProps, ButtonKit, CommandData, CommandKit, CommandKitButtonBuilderInteractionCollectorDispatch, CommandKitButtonBuilderInteractionCollectorDispatchContextData, CommandKitButtonBuilderOnEnd, CommandKitConfig, CommandKitEffectCallback, CommandKitSignal, CommandKitSignalInitializer, CommandKitSignalUpdater, CommandObject, CommandOptions, CommandProps, ContextMenuCommandProps, MessageContextMenuCommandProps, ReloadType, SlashCommandProps, UserContextMenuCommandProps, ValidationProps, createEffect, createSignal, defineConfig, getConfig };
